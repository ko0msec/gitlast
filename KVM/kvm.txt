1、开启CPU虚拟化,Linux主机必须安装了图形界面 KDE GONE 
2、查看Linux是否支持虚拟化
	egrep - "svm|vmx" /proc/cpuinfo
	加载kvm虚拟化
	modprobe kvm | kvm_inter

3、安装qemu libvirt virt-manager网络管理工具,device-mapper-libs是一个库
	yum groupinstall "Virtualization"	
	yum groupinfo "Virtualization"
	yum install qemu-kvm qemu-kvm-tools
	yum install libvirt virt-manager device-mapper-libs	
	
	3.1 KVM网络管理
	service libvirtd start 
	关闭NetworkManager否则重启网卡会报错
	service NetworkManager stop
	chkconfig NetworkManager off
	查看并桥接网卡 把eth0桥接到br0网卡上，eth0上的IP也会飞到br0上
	brctl show 
	virsh iface-bridge eth0 br0
	
	3.2
	在KVM平台安装tigervnc tigervnc-server vnc-server用于链接虚拟机
	yum install tigervnc tigervnc-server vnc-server
	配置vnc
	vncpassword  创建vnc密码
	vncserver	启动vnc
	使用windows客户端连接vnc
	

4、配置kvm脚本，kvm的qemu-kvm不在/usr/bin下，虚拟链接一下
	rpm -ql qemu-kvm
	ln -sv /usr/libexec/qemu-kvm /usr/bin/qemu-kvm 
	

5、qemu-kvm [option] 参数使用
Qemu是一个广泛使用的开源计算机仿真器和虚拟机。当作为仿真器时，可以在一种架构(如PC机)下运行另一种架构(如ARM)下的操作系统和程序。而通过动态转化，其可以获得很高的运行效率。当作为一个虚拟机时，qemu可以通过直接使用真机的系统资源，让虚拟系统能够获得接近于物理机的性能表现。qemu支持xen或者kvm模式下的虚拟化。当用kvm时，qemu可以虚拟x86、服务器和嵌入式powerpc，以及s390的系统。

QEMU 当运行与主机架构相同的目标架构时可以使用 KVM。例如，当在一个x86兼容处理器上运行 qemu-system-x86 时，可以利用 KVM 加速――为宿主机和客户机提供更好的性能。

Qemu有如下几个部分组成：
◇	处理器模拟器(x86、PowerPC和Sparc)；
◇	仿真设备(显卡、网卡、硬盘、鼠标等)；
◇	用于将仿真设备连接至主机设备(真实设备)的通用设备；
◇	模拟机的描述信息；
◇	调试器；
◇	与模拟器交互的用户接口；

2.5.6.1 使用qemu-kvm安装Guest

如2.5.5中所述，基于libvirt的工具如virt-manager和virt-install提供了非常便捷的虚拟机管理接口，但它们事实上上经二次开发后又封装了qemu-kvm的工具。因此，直接使用qemu-kvm命令也能够完成此前的任务。

2.5.6.1.1 qemu-kvm命令

在RHEL6上，qemu-kvm位于/usr/libexec目录中。由于此目录不属于PATH环境变量，故无法直接使用，这样也阻止了可以直接使用qemu作为创建并管理虚拟机。如若想使用qemu虚拟机，可以通过将/usr/libexec/qemu-kvm链接为/usr/bin/qemu实现。

# ln  -sv  /usr/lib/exec/qemu-kvm  /usr/bin/qemu-kvm

qemu-kvm命令使用格式为“qemu-kvm  [options]  [disk_image]”，其选项非常多，不过，大致可分为如下几类。

◇	标准选项；
◇	USB选项；
◇	显示选项；
◇	i386平台专用选项；
◇	网络选项；
◇	字符设备选项；
◇	蓝牙相关选项；
◇	Linux系统引导专用选项；
◇	调试/专家模式选项；
◇	PowerPC专用选项；
◇	Sparc32专用选项；

考虑到篇幅及使用需要，这里介绍的选项主要涉及到标准选项、显示选项、i386平台专用选项及Linux系统引导专用选项等相关的选项。

2.5.6.1.2 qemu-kvm的标准选项

qemu-kvm的标准选项主要涉及指定主机类型、CPU模式、NUMA、软驱设备、光驱设备及硬件设备等。
◇	-name name：设定虚拟机名称；
◇	-M machine：指定要模拟的主机类型，如Standard PC、ISA-only PC或Intel-Mac等，可以使用“qemu-kvm -M ?”获取所支持的所有类型；
◇	-m megs：设定虚拟机的RAM大小；
◇	-cpu model：设定CPU模型，如coreduo、qemu64等，可以使用“qemu-kvm -cpu ?”获取所支持的所有模型；
◇	-smp n[,cores=cores][,threads=threads][,sockets=sockets][,maxcpus=maxcpus]：设定模拟的SMP架构中CPU的个数等、每个CPU的核心数及CPU的socket数目等；PC机上最多可以模拟255颗CPU；maxcpus用于指定热插入的CPU个数上限；
◇	-numa opts：指定模拟多节点的numa设备；
◇	-fda file
◇	-fdb file：使用指定文件(file)作为软盘镜像，file为/dev/fd0表示使用物理软驱；
◇	-hda file
◇	-hdb file
◇	-hdc file
◇	-hdd file：使用指定file作为硬盘镜像；
◇	-cdrom file：使用指定file作为CD-ROM镜像，需要注意的是-cdrom和-hdc不能同时使用；将file指定为/dev/cdrom可以直接使用物理光驱；
◇	-drive option[,option[,option[,...]]]：定义一个硬盘设备；可用子选项有很多。
?	file=/path/to/somefile：硬件映像文件路径；
?	if=interface：指定硬盘设备所连接的接口类型，即控制器类型，如ide、scsi、sd、mtd、floppy、pflash及virtio等；
?	index=index：设定同一种控制器类型中不同设备的索引号，即标识号；
?	media=media：定义介质类型为硬盘(disk)还是光盘(cdrom)；
?	snapshot=snapshot：指定当前硬盘设备是否支持快照功能：on或off；
?	cache=cache：定义如何使用物理机缓存来访问块数据，其可用值有none、writeback、unsafe和writethrough四个；
?	format=format：指定映像文件的格式，具体格式可参见qemu-img命令；
◇	-boot [order=drives][,once=drives][,menu=on|off]：定义启动设备的引导次序，每种设备使用一个字符表示；不同的架构所支持的设备及其表示字符不尽相同，在x86 PC架构上，a、b表示软驱、c表示第一块硬盘，d表示第一个光驱设备，n-p表示网络适配器；默认为硬盘设备；
	-boot order=dc,once=d

2.5.6.1.3 qemu-kvm的显示选项

显示选项用于定义虚拟机启动后的显示接口相关类型及属性等。

◇	-nographic：默认情况下，qemu使用SDL来显示VGA输出；而此选项用于禁止图形接口，此时,qemu类似一个简单的命令行程序，其仿真串口设备将被重定向到控制台；
◇	-curses：禁止图形接口，并使用curses/ncurses作为交互接口；
◇	-alt-grab：使用Ctrl+Alt+Shift组合键释放鼠标；
◇	-ctrl-grab：使用右Ctrl键释放鼠标；
◇	-sdl：启用SDL；
◇	-spice option[,option[,...]]：启用spice远程桌面协议；其有许多子选项，具体请参照qemu-kvm的手册；
◇	-vga type：指定要仿真的VGA接口类型，常见类型有：
?	cirrus：Cirrus Logic GD5446显示卡；
?	std：带有Bochs VBI扩展的标准VGA显示卡；
?	vmware：VMWare SVGA-II兼容的显示适配器；
?	qxl：QXL半虚拟化显示卡；与VGA兼容；在Guest中安装qxl驱动后能以很好的方式工作，在使用spice协议时推荐使用此类型；
?	none：禁用VGA卡；
◇	-vnc display[,option[,option[,...]]]：默认情况下，qemu使用SDL显示VGA输出；使用-vnc选项，可以让qemu监听在VNC上，并将VGA输出重定向至VNC会话；使用此选项时，必须使用-k选项指定键盘布局类型；其有许多子选项，具体请参照qemu-kvm的手册；

	
6、qemu-kvm安装XP
	创建磁盘文件
	mkdir /img/vm1
	qemu-img create -f qcow2 -o size=10G /img/vm1/xp.qcow2	
	qemu-img 是用来创建img文件的 -f 指定文件格式 -o size指定大小
	
	创建虚拟机
	qemu-kvm -name "Xp" -m 768 -smp 1 -hda /img/vm1/xp.qcow2 -cdrom YLMF-x86.iso -boot order=dc
	VNC server running on `::1:5900'
	qemu-kvm 用来创建虚拟机 -name 指定名称 -m 指定内存 -smp 指定CPU核数不能超过宿主机 -hda 指定使用什么硬盘 -cdrom 指定镜像
	
	使用vncviewer 来启动虚拟机
	vncviewer :1  或者vncviewer :5900

6、qemu-kvm 使用帮助
	qemu-kvm --name ""


	

7、创建桥接网卡脚本,加入网卡设备
	/etc/qemu-ifup
#!/bin/bash
#
bridge=virbr0
if [ -n "$1" ]; then
  ifconfig $1 up
  sleep 1
  brctl addif $bridge $1
  exit 0
else
  echo "Error: no interfacespecified."
  exit 1
fi

	/etc/qemu-ifdown

# cat/etc/qemu-ifdown
#!/bin/bash
#
bridge=vribr0
if [ -n "$1" ];then
  brctl delif $bridge $1
  ifconfig $1 down
  exit 0
else
  echo "Error: no interfacespecified."
  exit 1
fi

给予脚本执行权限；

	#chmod +x /etc/qemu-ifup 
	#chmod +x /etc/qemu-ifdown

创建虚拟机并启用网卡-“以桥接模式”
qemu-kvm -name "winxp" -m 768 -smp 1 -drive file=/img/vm1/xp.qcow2,if=ide,index=0,media=disk,format=qcow2 -drive file=/root/YLMF_GHOST_XP_SP3_V2016_06.iso,media=cdrom,index=1 -boot order=dc -net nic -net tap,ifname=vnet0,script=/etc/qemu-ifup --daemonize 

	--daemonize 后台启动

问题：虚拟机之间内网互通，访问外网不通
解决：修改/etc/libvirt/qemu/networks/下面的一个文件
	default.xml
	把里面的地址段改成和宿主机一个地址段就可以访问外网


8、KVM网络模式
	bridge模型
	brctl iface-birdge eth0 virbr0 桥接网卡
	
	NAT模型：
	brctl show  查看当前的网卡模式
	brctl addbr virbr1  添加一网卡
	ifconfig 192.168.1.1/24 virbr1 给新添加的网卡增加nat-IP地址
	
	8.2安装dnsmasq
	yum install dnsmasq
	vi /etc/dnsmasq.conf
	8.2 添加网络转发
	iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -j SNAT --to-source 150.1.1.1
	qemu-kvm --name "nat" -m 512 -smp 2 -drive file=/img/vm1/xp.qcow2,media=disk,if=ide,index=0,format=qcow2 -net nic,model=virtio -net tap,ifname=vnet0,downscript=no -boot order=dc
	
KVM 组件
	qemu：qemu-kvm  qemu-img
	libvirt：virt-viewer,virt-manager,


9、KVM快照
	qemu-img是用来实现磁盘映像管理的工具组件。
		create : 创建一个新的磁盘
		check：检查磁盘映像文件中的错误
		info：显示指定磁盘映像的信息
		snapshot：管理磁盘映像的快照
				-a 应用一个快照
				-c 创建一个快照
				-d 删除一个快照
				-l 显示当前快照
		commit：提交磁盘映像的所有改变
		rbase：给予某个磁盘映像文件创建新的映像文件
		resize：增大磁盘映像文件的大小

10、
libvirt: 工具实现虚拟机管理：
	装系统：virt-manager, virt-install, virsh virt-viewer


2.5.3.2 使用virt-install创建虚拟机并安装GuestOS

virt-install是一个命令行工具，它能够为KVM、Xen或其它支持libvrit API的hypervisor创建虚拟机并完成GuestOS安装；此外，它能够基于串行控制台、VNC或SDL支持文本或图形安装界面。安装过程可以使用本地的安装介质如CDROM，也可以通过网络方式如NFS、HTTP或FTP服务实现。对于通过网络安装的方式，virt-install可以自动加载必要的文件以启动安装过程而无须额外提供引导工具。当然，virt-install也支持PXE方式的安装过程，也能够直接使用现有的磁盘映像直接启动安装过程。

virt-install命令有许多选项，这些选项大体可分为下面几大类，同时对每类中的常用选项也做出简单说明。
◇	一般选项：指定虚拟机的名称、内存大小、VCPU个数及特性等；
?	-n NAME, --name=NAME：虚拟机名称，需全局惟一；
?	-r MEMORY, --ram=MEMORY：虚拟机内在大小，单位为MB；
?	--vcpus=VCPUS[,maxvcpus=MAX][,sockets=#][,cores=#][,threads=#]：VCPU个数及相关配置；
?	--cpu=CPU：CPU模式及特性，如coreduo等；可以使用qemu-kvm -cpu ?来获取支持的CPU模式；
◇	安装方法：指定安装方法、GuestOS类型等；
?	-c CDROM, --cdrom=CDROM：光盘安装介质；
?	-l LOCATION, --location=LOCATION：安装源URL，支持FTP、HTTP及NFS等，如ftp://172.16.0.1/pub；
?	--pxe：基于PXE完成安装；
?	--livecd: 把光盘当作LiveCD；
?	--os-type=DISTRO_TYPE：操作系统类型，如linux、unix或windows等；
?	--os-variant=DISTRO_VARIANT：某类型操作系统的变体，如rhel5、fedora8等；
?	-x EXTRA, --extra-args=EXTRA：根据--location指定的方式安装GuestOS时，用于传递给内核的额外选项，例如指定kickstart文件的位置，--extra-args "ks=http://172.16.0.1/class.cfg"
?	--boot=BOOTOPTS：指定安装过程完成后的配置选项，如指定引导设备次序、使用指定的而非安装的kernel/initrd来引导系统启动等 ；例如：
?	--boot  cdrom,hd,network：指定引导次序；
?	--boot kernel=KERNEL,initrd=INITRD,kernel_args=”console=/dev/ttyS0”：指定启动系统的内核及initrd文件；
◇	存储配置：指定存储类型、位置及属性等；
?	--disk=DISKOPTS：指定存储设备及其属性；格式为--disk /some/storage/path,opt1=val1，opt2=val2等；常用的选项有：
?	device：设备类型，如cdrom、disk或floppy等，默认为disk；
?	bus：磁盘总结类型，其值可以为ide、scsi、usb、virtio或xen；
?	perms：访问权限，如rw、ro或sh（共享的可读写），默认为rw；
?	size：新建磁盘映像的大小，单位为GB；
?	cache：缓存模型，其值有none、writethrouth（缓存读）及writeback（缓存读写）；
?	format：磁盘映像格式，如raw、qcow2、vmdk等；
?	sparse：磁盘映像使用稀疏格式，即不立即分配指定大小的空间；
?	--nodisks：不使用本地磁盘，在LiveCD模式中常用；
◇	网络配置：指定网络接口的网络类型及接口属性如MAC地址、驱动模式等；
?	-w NETWORK, --network=NETWORK,opt1=val1,opt2=val2：将虚拟机连入宿主机的网络中，其中NETWORK可以为：
?	bridge=BRIDGE：连接至名为“BRIDEG”的桥设备；
?	network=NAME：连接至名为“NAME”的网络；
其它常用的选项还有：
?	model：GuestOS中看到的网络设备型号，如e1000、rtl8139或virtio等；
?	mac：固定的MAC地址；省略此选项时将使用随机地址，但无论何种方式，对于KVM来说，其前三段必须为52:54:00；
?	--nonetworks：虚拟机不使用网络功能；
◇	图形配置：定义虚拟机显示功能相关的配置，如VNC相关配置；
?	--graphics TYPE,opt1=val1,opt2=val2：指定图形显示相关的配置，此选项不会配置任何显示硬件（如显卡），而是仅指定虚拟机启动后对其进行访问的接口；
?	TYPE：指定显示类型，可以为vnc、sdl、spice或none等，默认为vnc；
?	port：TYPE为vnc或spice时其监听的端口；
?	listen：TYPE为vnc或spice时所监听的IP地址，默认为127.0.0.1，可以通过修改/etc/libvirt/qemu.conf定义新的默认值；
?	password：TYPE为vnc或spice时，为远程访问监听的服务进指定认证密码；
?	--noautoconsole：禁止自动连接至虚拟机的控制台；
◇	设备选项：指定文本控制台、声音设备、串行接口、并行接口、显示接口等；
?	--serial=CHAROPTS：附加一个串行设备至当前虚拟机，根据设备类型的不同，可以使用不同的选项，格式为“--serial type,opt1=val1,opt2=val2,...”，例如：
?	--serial pty：创建伪终端；
?	--serial dev,path=HOSTPATH：附加主机设备至此虚拟机；
?	--video=VIDEO：指定显卡设备模型，可用取值为cirrus、vga、qxl或vmvga；

◇	虚拟化平台：虚拟化模型（hvm或paravirt）、模拟的CPU平台类型、模拟的主机类型、hypervisor类型（如kvm、xen或qemu等）以及当前虚拟机的UUID等；
?	-v, --hvm：当物理机同时支持完全虚拟化和半虚拟化时，指定使用完全虚拟化；
?	-p, --paravirt：指定使用半虚拟化；
?	--virt-type：使用的hypervisor，如kvm、qemu、xen等；所有可用值可以使用’virsh capabilities’命令获取；
◇	其它：
?	--autostart：指定虚拟机是否在物理启动后自动启动；
?	--print-xml：如果虚拟机不需要安装过程(--import、--boot)，则显示生成的XML而不是创建此虚拟机；默认情况下，此选项仍会创建磁盘映像；
?	--force：禁止命令进入交互式模式，如果有需要回答yes或no选项，则自动回答为yes；
?	--dry-run：执行创建虚拟机的整个过程，但不真正创建虚拟机、改变主机上的设备配置信息及将其创建的需求通知给libvirt；
?	-d, --debug：显示debug信息；

尽管virt-install命令有着类似上述的众多选项，但实际使用中，其必须提供的选项仅包括--name、--ram、--disk（也可是--nodisks）及安装过程相关的选项。此外，有时还需要使用括--connect=CONNCT选项来指定连接至一个非默认的hypervisor。

下面这个示例创建一个名为rhel5的虚拟机，其hypervisor为KVM，内存大小为512MB，磁盘为8G的映像文件/var/lib/libvirt/images/rhel5.8.img，通过boot.iso光盘镜像来引导启动安装过程。

# virt-install \
   --connect qemu:///system \
   --virt-type kvm \
   --name rhel5 \
   --ram 512 \
   --disk path=/var/lib/libvirt/images/rhel5.img,size=8 \
   --graphics vnc \
   --cdrom /tmp/boot.iso \
   --os-variant rhel5

下面的示例将创建一个名为rhel6的虚拟机，其有两个虚拟CPU，安装方法为FTP，并指定了ks文件的位置，磁盘映像文件为稀疏格式，连接至物理主机上的名为brnet0的桥接网络：

# virt-install \
    --connect qemu:///system \
    --virt-type kvm \
    --name rhel6 \
    --ram 1024 \
    --vcpus 2 \
    --network bridge=brnet0 \
    --disk path=/VMs/images/rhel6.img,size=120,sparse \
    --location ftp://172.16.0.1/rhel6/dvd \
    --extra_args “ks=http://172.16.0.1/rhel6.cfg” \
    --os-variant rhel6 \
    --force 

下面的示例将创建一个名为rhel5.8的虚拟机，磁盘映像文件为稀疏模式的格式为qcow2且总线类型为virtio，安装过程不启动图形界面（--nographics），但会启动一个串行终端将安装过程以字符形式显示在当前文本模式下，虚拟机显卡类型为cirrus：

# virt-install \
--connect qemu:///system \
--virt-type kvm \ 
--name rhel5.8 \ 
--vcpus 2,maxvcpus=4 \
--ram 512 \ 
--disk path=/VMs/images/rhel5.8.img,size=120,format=qcow2,bus=virtio,sparse \ 
--network bridge=brnet0,model=virtio
--nographics \
--location ftp://172.16.0.1/pub \ 
--extra-args "ks=http://172.16.0.1/class.cfg  console=ttyS0  serial" \
--os-variant rhel5 \
--force  \
--video=cirrus

下面的示例则利用已经存在的磁盘映像文件（已经有安装好的系统）创建一个名为rhel5.8的虚拟机：

# virt-install \
    --name rhel5.8
    --ram 512
    --disk /VMs/rhel5.8.img
    --import

每个虚拟机创建后，其配置信息保存在/etc/libvirt/qemu目录中，文件名与虚拟机相同，格式为XML。

导入虚拟机
# virt-install -n "cirr" -r 512 --vcpus 1 -disk path=/img/vm1/cirros-0.3.0-x86_64-disk.img --network network=default --import

virsh uri: 查看当前主机上hypervisor的连接路径；
virsh connect:
virsh define: 创建一个虚拟机，根据事先定义的xml格式的配置文件；创建以后不会自动启动；
virsh create: 创建，创建完成后会自动启动；
virsh undefine: 删除
virsh list  :显示虚拟机

报错：
ERROR    internal error Process exited while reading console log output: char device redirected to /dev/pts/1			
解决：
# vi /etc/libvirt/qemu.conf
...
user = "root"
group = "root"
dynamic_ownership = 0
vnc_listen = "0.0.0.0"
...
重启libvirtd service libvirtd restart

